services:
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ "gpu" ]
    volumes:
      - ./data/ollama:/root/.ollama # Host bind mount for persistence
    networks:
      - intranet
    restart: unless-stopped

  open-webui:
    image: ghcr.io/open-webui/open-webui:v0.6.22
    container_name: open-webui
    ports:
      - "5000:8080" # Maps container's port 8080 to host's port 5000
    networks:
      - intranet
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./data/open-webui:/app/backend/data # Host bind mount for persistence
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ "gpu" ]

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    ports:
      - "5678:5678" # Maps container's port 5678 to host's port 5678
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USERNAME}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=UTC
    volumes:
      - ./data/n8n:/home/node/.n8n # Host bind mount for persistence
    networks:
      - intranet
    restart: unless-stopped

  coolify-redis:
    image: redis:7-alpine
    container_name: coolify-redis
    command: redis-server --appendonly yes
    volumes:
      - ./data/coolify-redis:/data
    networks:
      - intranet
    restart: unless-stopped

  coolify-db:
    image: postgres:15-alpine
    container_name: coolify-db
    environment:
      - POSTGRES_DB=${COOLIFY_DB_NAME}
      - POSTGRES_USER=${COOLIFY_DB_USER}
      - POSTGRES_PASSWORD=${COOLIFY_DB_PASSWORD}
    volumes:
      - ./data/coolify-db:/var/lib/postgresql/data
    networks:
      - intranet
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coolify -d coolify"]
      interval: 10s
      timeout: 5s
      retries: 5

  coolify:
    image: coollabsio/coolify:latest
    container_name: coolify
    ports:
      - "6000:8080"  # Host port 6000 maps to container port 8080
    environment:
      - DB_CONNECTION=pgsql
      - DB_HOST=coolify-db
      - DB_PORT=5432
      - DB_DATABASE=${COOLIFY_DB_NAME}
      - DB_USERNAME=${COOLIFY_DB_USER}
      - DB_PASSWORD=${COOLIFY_DB_PASSWORD}
      - COOLIFY_PORT=8080  # Keep Coolify on its default port inside container
      - COOLIFY_HOST=0.0.0.0
      - REDIS_URL=redis://coolify-redis:6379
      - APP_KEY=${APP_KEY}
    volumes:
      - ./data/coolify:/app/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - intranet
    restart: unless-stopped
    depends_on:
      coolify-redis:
        condition: service_started
      coolify-db:
        condition: service_healthy

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    command: tunnel run Ollama
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARED_TUNNEL_TOKEN}
    networks:
      - intranet
    restart: unless-stopped

networks:
  intranet:
    driver: bridge
